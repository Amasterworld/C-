/*Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.


Example 1:

Input: n = 2
Output: [0,1,1]
Explanation:
0 --> 0
1 --> 1
2 --> 10
Example 2:

Input: n = 5
Output: [0,1,1,2,1,2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101

*/

/*SOLUTION: traverse each num from  0 to n and calculate sum += num%2, until num /2 0;
TC: we traverse all num from 0 to n: and we have to divide num/2 reach to 0: logn, then 
totally : TC is O(nlogn)

*/


class Solution{

public:

    vector<int> countBits(int n){

        vector<int> ans;
        for (int i = 0; i <= n; ++i){
            int sum = 0; 
            int num = i;
            // why do we have to use num here, instead of using directly i?
            // because it make infnitny loop if we do while ( i !=0){ 
                                                    //    i /= 2;}
            // inside while loop i == 0, but outside i still == 1 that means infinity loop.
            while (i !=0 ){
                sum +=  num % 2;
                num /= 2;

            }

        ans.emplace_back(sum);
        }
    return ans;
    }
};